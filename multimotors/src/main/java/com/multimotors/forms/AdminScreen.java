package com.multimotors.forms;

import com.multimotors.models.Sales;
import com.multimotors.models.User;
import com.multimotors.models.Vehicle;
import com.multimotors.controllers.SalesController;
import com.multimotors.controllers.UsersController;
import com.multimotors.controllers.VehiclesController;
import com.multimotors.utils.JPanelToPdf;
import com.multimotors.utils.Utils;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Set;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.DefaultXYDataset;

/**
 * @author Sergio
 * @author Fabian 
 */
public class AdminScreen extends javax.swing.JDialog {

    public AdminScreen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    public AdminScreen(java.awt.Frame parent, boolean modal, int id_user) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        init(id_user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt_logo = new javax.swing.JLabel();
        bt_gestionusuarios = new javax.swing.JButton();
        bt_gestionvehiculos = new javax.swing.JButton();
        bt_modousuario = new javax.swing.JButton();
        panel_main = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        bt_graficoPorTipo = new javax.swing.JButton();
        bt_graficoprecioxantiguedad = new javax.swing.JButton();
        bt_graficoporcategoria = new javax.swing.JButton();
        bt_graficomarcafecha = new javax.swing.JButton();
        bt_aniadirPDF = new javax.swing.JButton();
        bt_graficoevolucionventas = new javax.swing.JButton();
        bt_generarpdf = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(244, 243, 243));
        jPanel1.setForeground(new java.awt.Color(60, 63, 65));
        jPanel1.setMaximumSize(new java.awt.Dimension(1280, 720));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(txt_logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 260, 200));

        bt_gestionusuarios.setBackground(new java.awt.Color(255, 153, 255));
        bt_gestionusuarios.setText("GESTION DE USUARIOS");
        bt_gestionusuarios.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_gestionusuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_gestionusuariosActionPerformed(evt);
            }
        });
        jPanel1.add(bt_gestionusuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 240, 40));

        bt_gestionvehiculos.setBackground(new java.awt.Color(255, 153, 255));
        bt_gestionvehiculos.setText("GESTION DE VEHICULOS");
        bt_gestionvehiculos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_gestionvehiculos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_gestionvehiculosActionPerformed(evt);
            }
        });
        jPanel1.add(bt_gestionvehiculos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 240, 40));

        bt_modousuario.setBackground(new java.awt.Color(255, 153, 255));
        bt_modousuario.setText("IR A MODO USUARIO");
        bt_modousuario.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_modousuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_modousuarioActionPerformed(evt);
            }
        });
        jPanel1.add(bt_modousuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 660, 240, 40));

        panel_main.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.add(panel_main, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 970, 650));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bt_graficoPorTipo.setBackground(new java.awt.Color(255, 153, 255));
        bt_graficoPorTipo.setText("VEHICULOS POR TIPO");
        bt_graficoPorTipo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_graficoPorTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_graficoPorTipoActionPerformed(evt);
            }
        });
        jPanel2.add(bt_graficoPorTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 240, 40));

        bt_graficoprecioxantiguedad.setBackground(new java.awt.Color(255, 153, 255));
        bt_graficoprecioxantiguedad.setText("VEHICULOS POR PRECIO Y ANTIGÜEDAD");
        bt_graficoprecioxantiguedad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_graficoprecioxantiguedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_graficoprecioxantiguedadActionPerformed(evt);
            }
        });
        jPanel2.add(bt_graficoprecioxantiguedad, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 240, 40));

        bt_graficoporcategoria.setBackground(new java.awt.Color(255, 153, 255));
        bt_graficoporcategoria.setText("VEHICULOS POR CATEGORIA");
        bt_graficoporcategoria.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_graficoporcategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_graficoporcategoriaActionPerformed(evt);
            }
        });
        jPanel2.add(bt_graficoporcategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 240, 40));

        bt_graficomarcafecha.setBackground(new java.awt.Color(255, 153, 255));
        bt_graficomarcafecha.setText("VENTAS DE MARCA POR FECHA");
        bt_graficomarcafecha.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_graficomarcafecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_graficomarcafechaActionPerformed(evt);
            }
        });
        jPanel2.add(bt_graficomarcafecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 240, 40));

        bt_aniadirPDF.setBackground(new java.awt.Color(255, 153, 255));
        bt_aniadirPDF.setText("AÑADIR AL PDF");
        bt_aniadirPDF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_aniadirPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_aniadirPDFActionPerformed(evt);
            }
        });
        jPanel2.add(bt_aniadirPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 240, 40));

        bt_graficoevolucionventas.setBackground(new java.awt.Color(255, 153, 255));
        bt_graficoevolucionventas.setText("EVOLUCION DE LAS VENTAS");
        bt_graficoevolucionventas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_graficoevolucionventas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_graficoevolucionventasActionPerformed(evt);
            }
        });
        jPanel2.add(bt_graficoevolucionventas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 240, 40));

        bt_generarpdf.setBackground(new java.awt.Color(255, 153, 255));
        bt_generarpdf.setText("GENERAR PDF");
        bt_generarpdf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_generarpdf.setEnabled(false);
        bt_generarpdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_generarpdfActionPerformed(evt);
            }
        });
        jPanel2.add(bt_generarpdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 240, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 260, 550));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 0, 970, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/myacc_wp.jpg"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(1280, 670));
        jLabel1.setMinimumSize(new java.awt.Dimension(1280, 670));
        jLabel1.setPreferredSize(new java.awt.Dimension(1280, 670));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 720));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_modousuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_modousuarioActionPerformed
        utils.openMainScreen(user.getId(), this);
    }//GEN-LAST:event_bt_modousuarioActionPerformed

    private void bt_gestionvehiculosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_gestionvehiculosActionPerformed
        abrirPantalla("Ver vehiculos", new VehiclesAdminScreen((MainScreen) getParent(), false, user.getId()));

    }//GEN-LAST:event_bt_gestionvehiculosActionPerformed

    private void bt_gestionusuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_gestionusuariosActionPerformed
        abrirPantalla("Ver usuarios", new UsersAdminScreen((MainScreen) getParent(), false, user.getId()));

    }//GEN-LAST:event_bt_gestionusuariosActionPerformed

    private void bt_generarpdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_generarpdfActionPerformed
        accionGrafico(5);
    }//GEN-LAST:event_bt_generarpdfActionPerformed

    private void bt_graficoevolucionventasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_graficoevolucionventasActionPerformed
        accionGrafico(4);
    }//GEN-LAST:event_bt_graficoevolucionventasActionPerformed

    private void bt_aniadirPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_aniadirPDFActionPerformed
        accionGrafico(6);
    }//GEN-LAST:event_bt_aniadirPDFActionPerformed

    private void bt_graficomarcafechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_graficomarcafechaActionPerformed
        accionGrafico(3);
    }//GEN-LAST:event_bt_graficomarcafechaActionPerformed

    private void bt_graficoporcategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_graficoporcategoriaActionPerformed
        accionGrafico(2);
    }//GEN-LAST:event_bt_graficoporcategoriaActionPerformed

    private void bt_graficoprecioxantiguedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_graficoprecioxantiguedadActionPerformed
        accionGrafico(1);
    }//GEN-LAST:event_bt_graficoprecioxantiguedadActionPerformed

    private void bt_graficoPorTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_graficoPorTipoActionPerformed
        accionGrafico(0);
    }//GEN-LAST:event_bt_graficoPorTipoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AdminScreen dialog = new AdminScreen(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_aniadirPDF;
    private javax.swing.JButton bt_generarpdf;
    private javax.swing.JButton bt_gestionusuarios;
    private javax.swing.JButton bt_gestionvehiculos;
    private javax.swing.JButton bt_graficoPorTipo;
    private javax.swing.JButton bt_graficoevolucionventas;
    private javax.swing.JButton bt_graficomarcafecha;
    private javax.swing.JButton bt_graficoporcategoria;
    private javax.swing.JButton bt_graficoprecioxantiguedad;
    private javax.swing.JButton bt_modousuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel panel_main;
    private javax.swing.JLabel txt_logo;
    // End of variables declaration//GEN-END:variables

    private UsersController userdao;
    private SalesController salesdao;
    private VehiclesController vehicledao;
    private HashMap<Integer, Vehicle> vehiclegraph;
    private HashMap<Integer, Sales> ventas;
    private JPanelToPdf jpd; 
    private String[] array;
    private Utils utils;
    private User user;

    private void init(int id_user) {
        this.utils = new Utils(this);
        this.userdao = new UsersController();
        this.user = userdao.readUser(id_user);
        this.vehicledao = new VehiclesController();
        this.vehiclegraph = vehicledao.readAll();
        this.salesdao = new SalesController();
        this.ventas = salesdao.readAll();
        this.jpd = new JPanelToPdf();
        sacarPermisos();
        colocarLogo();
        checkAccess();
    }

    private void checkAccess() {
        if (utils.accesoPermitido("Ver graficos", array)) {
            graficoPorTipo();
        } else {
            JOptionPane.showMessageDialog(this, "No tienes permisos para ver graficos");
        }
    }

    private void abrirPantalla(String permiso, JDialog pantalla) {
        if (utils.accesoPermitido(permiso, array)) {
            pantalla.setVisible(true);
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void reemplazarJPanel(JFreeChart chart) {
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(panel_main.getWidth(), panel_main.getHeight()));
        panel_main.removeAll();
        panel_main.add(chartPanel);
        panel_main.revalidate();
        panel_main.repaint();
    }

    private void graficoPorTipo() {
        HashMap<String, Integer> typeCount = contarVehiculosPorAtributo("type");

        DefaultPieDataset dataset = new DefaultPieDataset();
        for (HashMap.Entry<String, Integer> entry : typeCount.entrySet()) {
            dataset.setValue(entry.getKey(), entry.getValue());
        }

        JFreeChart chart = crearGraficoPie("VEHICULOS POR TIPO", dataset, typeCount.keySet());
        reemplazarJPanel(chart);
    }

    private String sacarOpcion() {
        JComboBox combo = new JComboBox();
        combo.addItem("Coches");
        combo.addItem("Motos");
        if (JOptionPane.showConfirmDialog(null, combo, "Escoge un tipo de vehículo", JOptionPane.YES_OPTION) == 0) {
            return String.valueOf(combo.getSelectedItem());
        }
        return "";
    }

    private void graficoPorCategoria() {
        String opcion = sacarOpcion();
        if (!opcion.equals("")) {
            HashMap<String, Integer> categoryCount = contarVehiculosPorAtributo("category", opcion);

            DefaultPieDataset dataset = new DefaultPieDataset();
            for (HashMap.Entry<String, Integer> entry : categoryCount.entrySet()) {
                dataset.setValue(entry.getKey(), entry.getValue());
            }

            JFreeChart chart = crearGraficoPie("VEHICULOS POR CATEGORIA", dataset, categoryCount.keySet());
            reemplazarJPanel(chart);
        }
    }

    private void graficoPrecioxAntiguedad() {
        ArrayList<String> marcas = obtenerMarcas();
        HashMap<String, Integer> ventasPorMarca = contarVentasPorMarca(marcas);
        ArrayList<LocalDate> fechas = obtenerFechasVentas();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (String marca : marcas) {
            for (LocalDate fecha : fechas) {
                int venta = ventasPorMarca.getOrDefault(marca, 0);
                dataset.addValue(venta, marca, fecha);
            }
        }

        JFreeChart chart = crearGraficoBarra("VENTAS DE MARCA POR FECHA", "Fecha", "Ventas", dataset);
        reemplazarJPanel(chart);
    }

    private void graficoEvolucionVentas() {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, 2023);
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        for (int i = 0; i < 12; i++) {
            calendar.set(Calendar.MONTH, i);
            Date startDate = calendar.getTime();
            calendar.set(Calendar.MONTH, i + 1);
            Date endDate = calendar.getTime();
            int cont = 0;
            for (Sales v : ventas.values()) {
                Date fecha = v.getSale_date();
                try {
                    Date fechaFormat = format.parse(format.format(fecha));
                    Date startDateFormat = format.parse(format.format(startDate));
                    Date endDateFormat = format.parse(format.format(endDate));

                    if ((fechaFormat.after(startDateFormat) || fechaFormat.equals(startDateFormat))
                            && fechaFormat.before(endDateFormat) && !fechaFormat.equals(endDateFormat)) {
                        cont++;
                    }
                } catch (Exception e) {
                }
            }

            DateFormatSymbols dfs = new DateFormatSymbols();
            String monthName = dfs.getMonths()[i];

            dataset.addValue(cont, "Ventas", monthName);
        }

        JFreeChart chart = crearGraficoLinea("EVOLUCION DE LAS VENTAS", "Fechas", "Ventas", dataset);
        reemplazarJPanel(chart);
    }

    private void graficoMarcaporFecha() {
        DefaultXYDataset dataset = new DefaultXYDataset();
        for (Vehicle v : vehiclegraph.values()) {
            String marca = v.getBrand();
            String modelo = v.getModel();
            String coche = marca + " " + modelo;
            double price = v.getPrice();
            int year = v.getSpecs().getModel_year();
            double[][] data = {
                {price},
                {year}
            };
            dataset.addSeries(coche, data);
        }

        JFreeChart chart = crearGraficoDispersion("VEHICULOS POR PRECIO Y ANTIGÜEDAD", "Precio", "Antigüedad", dataset);
        reemplazarJPanel(chart);
    }

    private HashMap<String, Integer> contarVehiculosPorAtributo(String atributo) {
        HashMap<String, Integer> countMap = new HashMap<>();
        for (Vehicle v : vehiclegraph.values()) {
            String value = "";
            if (atributo.equals("type")) {
                value = v.getType();
            } else if (atributo.equals("category")) {
                value = v.getCategory();
            }
            countMap.put(value, countMap.getOrDefault(value, 0) + 1);
        }
        return countMap;
    }

    private HashMap<String, Integer> contarVehiculosPorAtributo(String atributo, String opcion) {
        HashMap<String, Integer> countMap = new HashMap<>();
        for (Vehicle v : vehiclegraph.values()) {
            if (opcion.equals("Coches") && v.getType().equals("Coche")) {
                String category = v.getCategory();
                countMap.put(category, countMap.getOrDefault(category, 0) + 1);
            } else if (opcion.equals("Motos") && v.getType().equals("Moto")) {
                String category = v.getCategory();
                countMap.put(category, countMap.getOrDefault(category, 0) + 1);
            }
        }
        return countMap;
    }

    private JFreeChart crearGraficoPie(String titulo, DefaultPieDataset dataset, Set<String> keys) {
        JFreeChart chart = ChartFactory.createPieChart(titulo, dataset, true, true, false);
        PiePlot plot = (PiePlot) chart.getPlot();
        int colorIndex = 0;
        for (String key : keys) {
            plot.setSectionPaint(key, obtenerColorPorIndice(colorIndex));
            colorIndex++;
        }
        return chart;
    }

    private ArrayList<String> obtenerMarcas() {
        ArrayList<String> marcas = new ArrayList<>();
        vehiclegraph = vehicledao.readFilter("");
        for (Vehicle v : vehiclegraph.values()) {
            String marca = v.getBrand();
            if (!marcas.contains(marca)) {
                marcas.add(marca);
            }
        }
        return marcas;
    }

    private HashMap<String, Integer> contarVentasPorMarca(ArrayList<String> marcas) {
        HashMap<String, Integer> ventasPorMarca = new HashMap<>();
        for (Sales s : ventas.values()) {
            int idVehiculo = s.getId_vehicle();
            if (vehiclegraph.containsKey(idVehiculo)) {
                String marca = vehiclegraph.get(idVehiculo).getBrand();
                ventasPorMarca.put(marca, ventasPorMarca.getOrDefault(marca, 0) + 1);
            }
        }
        return ventasPorMarca;
    }

    private ArrayList<LocalDate> obtenerFechasVentas() {
        ArrayList<LocalDate> fechas = new ArrayList<>();
        for (Sales s : ventas.values()) {
            fechas.add(LocalDate.now());
        }
        return fechas;
    }

    private JFreeChart crearGraficoBarra(String titulo, String labelEjeX, String labelEjeY, DefaultCategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createBarChart(titulo, labelEjeX, labelEjeY, dataset);
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        plot.setDomainGridlinePaint(Color.BLACK);
        plot.setRangeGridlinePaint(Color.BLACK);

        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45); // Rotar etiquetas del eje x

        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        return chart;
    }

    private JFreeChart crearGraficoLinea(String titulo, String labelEjeX, String labelEjeY, DefaultCategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createLineChart(titulo, labelEjeX, labelEjeY, dataset, PlotOrientation.VERTICAL, true, true, false);
        return chart;
    }

    private JFreeChart crearGraficoDispersion(String titulo, String labelEjeX, String labelEjeY, DefaultXYDataset dataset) {
        JFreeChart chart = ChartFactory.createScatterPlot(titulo, labelEjeX, labelEjeY, dataset, PlotOrientation.VERTICAL, true, false, false);
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.getRenderer().setSeriesPaint(0, Color.BLUE);
        return chart;
    }

    private Color obtenerColorPorIndice(int index) {
        Color[] colores = {Color.RED, Color.BLUE, Color.GREEN};
        return colores[index % colores.length];
    }

    private void colocarLogo() {
        try {
            ImageIcon imgIcon = new ImageIcon(getClass().getResource("/img/logo.jpg"));
            Image imgEscalada = imgIcon.getImage().getScaledInstance(txt_logo.getWidth(), txt_logo.getHeight(), Image.SCALE_SMOOTH);
            Icon iconoEscalado = new ImageIcon(imgEscalada);
            txt_logo.setIcon(iconoEscalado);
        } catch (Exception e) {
        }
    }

    private void sacarPermisos() {
        String permisos = user.getPermissions();
        array = permisos.split("-");
    }

    private void accionGrafico(int index) {
        if(index != 5){bt_aniadirPDF.setEnabled(true);}
        if (utils.accesoPermitido("Ver graficos", array)) {
            switch (index) {
                case 0:
                    graficoPorTipo();
                    break;
                case 1:
                    graficoMarcaporFecha();
                    break;
                case 2:
                    graficoPorCategoria();
                    break;
                case 3:
                    graficoPrecioxAntiguedad();
                    break;
                case 4:
                    graficoEvolucionVentas();
                    break;
                case 5:
                    descargarPDF();
                    break;
                default:
                    añadirGraficoAlPDF();
                    break;
            }
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void añadirGraficoAlPDF() {
        if(jpd.addToPDF(panel_main)){
            
            utils.showMessage("Gráfico añadido al PDF correctamente");
            bt_aniadirPDF.setEnabled(false);
            
            if(!bt_generarpdf.isEnabled()){
                bt_generarpdf.setEnabled(true);
            }
        } else {
            utils.showMessage("Error al añadir gráfico al PDF. Intentalo nuevamente.");
        }
    }

    private void descargarPDF() {
        if(jpd.descargarPDF()){
            if(utils.showConfirmDialog("PDF descargado correctamente. Quieres abrir el PDF?", "Abrir PDF") == 0){
                jpd.abrirPDF();
            } 
            if(!bt_aniadirPDF.isEnabled()){
                bt_aniadirPDF.setEnabled(true);
            }
            jpd = new JPanelToPdf();
            bt_generarpdf.setEnabled(false);        
        }
    }
}