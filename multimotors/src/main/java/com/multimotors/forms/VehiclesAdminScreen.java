package com.multimotors.forms;

import com.multimotors.models.Specifications;
import com.multimotors.models.User;
import com.multimotors.models.Vehicle;
import com.multimotors.controllers.UsersController;
import com.multimotors.controllers.VehiclesController;
import com.multimotors.utils.AWSFiles;
import com.multimotors.utils.Utils;
import com.toedter.calendar.JYearChooser;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;

/**
 * @author Sergio 
 * @author Fabian
 */
public class VehiclesAdminScreen extends javax.swing.JDialog {

    public VehiclesAdminScreen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    public VehiclesAdminScreen(java.awt.Frame parent, boolean modal, int id_user) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        init(id_user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_excel = new javax.swing.JPanel();
        scroll_excel = new javax.swing.JScrollPane();
        tb_vehiclesExcel = new javax.swing.JTable();
        panel_vehicles = new javax.swing.JPanel();
        scroll_tb = new javax.swing.JScrollPane();
        tb_vehicles = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        txt_marca = new javax.swing.JTextField();
        txt_modelo = new javax.swing.JTextField();
        txt_km = new javax.swing.JTextField();
        txt_consumo = new javax.swing.JTextField();
        txt_peso = new javax.swing.JTextField();
        txt_potencia = new javax.swing.JTextField();
        txt_capacidadfuel = new javax.swing.JTextField();
        cb_transmision = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        bt_insert = new javax.swing.JLabel();
        bt_delete = new javax.swing.JLabel();
        bt_update = new javax.swing.JLabel();
        bt_clear = new javax.swing.JButton();
        bt_filtrar = new javax.swing.JButton();
        cb_tipo = new javax.swing.JComboBox<>();
        cb_categoria = new javax.swing.JComboBox<>();
        txt_matricula = new javax.swing.JTextField();
        cb_traccion = new javax.swing.JComboBox<>();
        txt_precio = new javax.swing.JTextField();
        txt_year = new com.toedter.calendar.JYearChooser();
        cb_combustible = new javax.swing.JComboBox<>();
        bt_insertImage = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bt_importar = new javax.swing.JButton();
        bt_exportar = new javax.swing.JButton();
        btn_insertExcel = new javax.swing.JButton();
        bt_format = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel_excel.setBackground(new java.awt.Color(204, 204, 204));
        panel_excel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        panel_excel.setLayout(new javax.swing.BoxLayout(panel_excel, javax.swing.BoxLayout.LINE_AXIS));

        tb_vehiclesExcel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_vehiclesExcel.setRowHeight(50);
        tb_vehiclesExcel.setRowMargin(5);
        scroll_excel.setViewportView(tb_vehiclesExcel);

        panel_excel.add(scroll_excel);

        getContentPane().add(panel_excel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 890, 620));

        panel_vehicles.setBackground(new java.awt.Color(204, 204, 204));
        panel_vehicles.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        panel_vehicles.setLayout(new javax.swing.BoxLayout(panel_vehicles, javax.swing.BoxLayout.LINE_AXIS));

        tb_vehicles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_vehicles.setRowHeight(50);
        tb_vehicles.setRowMargin(5);
        tb_vehicles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_vehiclesMouseClicked(evt);
            }
        });
        scroll_tb.setViewportView(tb_vehicles);

        panel_vehicles.add(scroll_tb);

        getContentPane().add(panel_vehicles, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 890, 620));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel2.add(txt_marca, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 150, -1));
        jPanel2.add(txt_modelo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 160, -1));
        jPanel2.add(txt_km, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 160, -1));
        jPanel2.add(txt_consumo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, 150, -1));
        jPanel2.add(txt_peso, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 150, -1));
        jPanel2.add(txt_potencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, 150, -1));
        jPanel2.add(txt_capacidadfuel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 160, -1));

        cb_transmision.setForeground(new java.awt.Color(73, 80, 87));
        cb_transmision.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Automática", "Manual" }));
        cb_transmision.setToolTipText("");
        jPanel2.add(cb_transmision, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 190, 150, 30));

        jLabel2.setText("Marca");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 160, -1));

        jLabel3.setText("Tipo de vehiculo");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 160, -1));

        jLabel4.setText("Categoría");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 160, -1));

        jLabel5.setText("Modelo");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 160, -1));

        jLabel7.setText("Matrícula");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 160, -1));

        jLabel8.setText("Tipo de combustible");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 160, -1));

        jLabel9.setText("Precio");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 160, -1));

        jLabel11.setText("Tipo de transmisión");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 160, -1));

        jLabel12.setText("Consumo");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 160, -1));

        jLabel13.setText("Kilómetros");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 160, -1));

        jLabel14.setText("Potencia");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, 160, -1));

        jLabel15.setText("Año del modelo");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 160, -1));

        jLabel17.setText("Tracción");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 160, -1));

        jLabel18.setText("Capacidad del tanque");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 170, -1));

        jLabel19.setText("Peso");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, 150, -1));

        bt_insert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/insert.png"))); // NOI18N
        bt_insert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_insertMouseClicked(evt);
            }
        });
        jPanel2.add(bt_insert, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 520, -1, 50));

        bt_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        bt_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_deleteMouseClicked(evt);
            }
        });
        jPanel2.add(bt_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 520, -1, -1));

        bt_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/update.png"))); // NOI18N
        bt_update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_updateMouseClicked(evt);
            }
        });
        jPanel2.add(bt_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 520, -1, -1));

        bt_clear.setBackground(new java.awt.Color(255, 153, 255));
        bt_clear.setText("LIMPIAR CAMPOS");
        bt_clear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_clearActionPerformed(evt);
            }
        });
        jPanel2.add(bt_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 630, 140, 40));

        bt_filtrar.setBackground(new java.awt.Color(255, 153, 255));
        bt_filtrar.setText("FILTRAR");
        bt_filtrar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_filtrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_filtrarActionPerformed(evt);
            }
        });
        jPanel2.add(bt_filtrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 580, 140, 40));

        cb_tipo.setForeground(new java.awt.Color(73, 80, 87));
        cb_tipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Coche", "Moto" }));
        cb_tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_tipoActionPerformed(evt);
            }
        });
        jPanel2.add(cb_tipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 160, 30));

        jPanel2.add(cb_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, 150, 30));
        jPanel2.add(txt_matricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 160, -1));

        cb_traccion.setForeground(new java.awt.Color(73, 80, 87));
        cb_traccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Trasera", "Delantera" }));
        cb_traccion.setToolTipText("");
        jPanel2.add(cb_traccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 160, 30));
        jPanel2.add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 150, -1));

        txt_year.setYear(1950);
        jPanel2.add(txt_year, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 160, 30));

        cb_combustible.setForeground(new java.awt.Color(73, 80, 87));
        cb_combustible.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Gasolina", "Diesel", "Otro" }));
        cb_combustible.setToolTipText("");
        jPanel2.add(cb_combustible, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 160, 30));

        bt_insertImage.setBackground(new java.awt.Color(255, 153, 255));
        bt_insertImage.setText("INSERTAR IMAGENES");
        bt_insertImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_insertImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_insertImageActionPerformed(evt);
            }
        });
        jPanel2.add(bt_insertImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 630, 180, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 350, 680));

        jPanel1.setBackground(new java.awt.Color(244, 243, 243));
        jPanel1.setForeground(new java.awt.Color(60, 63, 65));
        jPanel1.setMaximumSize(new java.awt.Dimension(1280, 720));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bt_importar.setBackground(new java.awt.Color(255, 153, 255));
        bt_importar.setText("IMPORTAR UN EXCEL");
        bt_importar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_importarActionPerformed(evt);
            }
        });
        jPanel1.add(bt_importar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 660, 180, 40));

        bt_exportar.setBackground(new java.awt.Color(255, 153, 255));
        bt_exportar.setText("EXPORTAR A EXCEL");
        bt_exportar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_exportarActionPerformed(evt);
            }
        });
        jPanel1.add(bt_exportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 660, 180, 40));

        btn_insertExcel.setBackground(new java.awt.Color(255, 153, 255));
        btn_insertExcel.setText("INSERTAR VEHICULOS DE EXCEL");
        btn_insertExcel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btn_insertExcel.setEnabled(false);
        btn_insertExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertExcelActionPerformed(evt);
            }
        });
        jPanel1.add(btn_insertExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 660, 250, 40));

        bt_format.setBackground(new java.awt.Color(255, 153, 255));
        bt_format.setText("FORMATO DE EXCEL A IMPORTAR");
        bt_format.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_format.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_formatActionPerformed(evt);
            }
        });
        jPanel1.add(bt_format, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 660, 250, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/myacc_wp.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1280, 720));
        jLabel1.setMinimumSize(new java.awt.Dimension(1280, 720));
        jLabel1.setPreferredSize(new java.awt.Dimension(1280, 720));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tb_vehiclesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_vehiclesMouseClicked
        rellenartxts();
    }//GEN-LAST:event_tb_vehiclesMouseClicked

    private void bt_updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_updateMouseClicked
        updateVehicle();
    }//GEN-LAST:event_bt_updateMouseClicked

    private void bt_insertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_insertMouseClicked
        insertVehicle();
    }//GEN-LAST:event_bt_insertMouseClicked

    private void bt_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_deleteMouseClicked
        deleteVehicle();
    }//GEN-LAST:event_bt_deleteMouseClicked

    private void btn_insertExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertExcelActionPerformed
        insertVehiclesExcel();
    }//GEN-LAST:event_btn_insertExcelActionPerformed

    private void bt_importarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_importarActionPerformed
        importExcel();
    }//GEN-LAST:event_bt_importarActionPerformed

    private void bt_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_clearActionPerformed
        dataClear();
    }//GEN-LAST:event_bt_clearActionPerformed

    private void bt_filtrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_filtrarActionPerformed
        buscarporfiltro();
    }//GEN-LAST:event_bt_filtrarActionPerformed

    private void bt_exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_exportarActionPerformed
        exportExcel();
    }//GEN-LAST:event_bt_exportarActionPerformed

    private void bt_formatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_formatActionPerformed
        mostrarFormato();
    }//GEN-LAST:event_bt_formatActionPerformed

    private void bt_insertImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_insertImageActionPerformed
        updateImage();
    }//GEN-LAST:event_bt_insertImageActionPerformed

    private void cb_tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_tipoActionPerformed
        cambiarCategoria();
    }//GEN-LAST:event_cb_tipoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VehiclesAdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VehiclesAdminScreen dialog = new VehiclesAdminScreen(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_clear;
    private javax.swing.JLabel bt_delete;
    private javax.swing.JButton bt_exportar;
    private javax.swing.JButton bt_filtrar;
    private javax.swing.JButton bt_format;
    private javax.swing.JButton bt_importar;
    private javax.swing.JLabel bt_insert;
    private javax.swing.JButton bt_insertImage;
    private javax.swing.JLabel bt_update;
    private javax.swing.JButton btn_insertExcel;
    private javax.swing.JComboBox<String> cb_categoria;
    private javax.swing.JComboBox<String> cb_combustible;
    private javax.swing.JComboBox<String> cb_tipo;
    private javax.swing.JComboBox<String> cb_traccion;
    private javax.swing.JComboBox<String> cb_transmision;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panel_excel;
    private javax.swing.JPanel panel_vehicles;
    private javax.swing.JScrollPane scroll_excel;
    private javax.swing.JScrollPane scroll_tb;
    private javax.swing.JTable tb_vehicles;
    private javax.swing.JTable tb_vehiclesExcel;
    private javax.swing.JTextField txt_capacidadfuel;
    private javax.swing.JTextField txt_consumo;
    private javax.swing.JTextField txt_km;
    private javax.swing.JTextField txt_marca;
    private javax.swing.JTextField txt_matricula;
    private javax.swing.JTextField txt_modelo;
    private javax.swing.JTextField txt_peso;
    private javax.swing.JTextField txt_potencia;
    private javax.swing.JTextField txt_precio;
    private com.toedter.calendar.JYearChooser txt_year;
    // End of variables declaration//GEN-END:variables

    private AWSFiles awsImages;
    private UsersController userdao;
    private VehiclesController vehicledao;
    private HashMap<Integer, Vehicle> vehicles;
    private String sWhere = "";
    private boolean isImport;
    private int indiceFila;
    private String[] array;
    private Utils utils;
    private User user;

    private void init(int id_user) {
        this.utils = new Utils(this);
        this.awsImages = new AWSFiles();
        this.userdao = new UsersController();
        this.vehicledao = new VehiclesController();
        this.user = userdao.readUser(id_user);
        this.vehicles = vehicledao.readAll();
        iniciarTabla(vehicles);
        sacarPermisos();
    }

    private void iniciarTabla(HashMap<Integer, Vehicle> vehicleshash) {
        panel_excel.setVisible(false);
        panel_vehicles.setVisible(true);

        String[] columnNames = {
            "ID", "Tipo", "Marca", "Modelo", "Estado", "Categoria", "Matricula", "Precio", "Fotos",
            "Combustible", "Transmision", "Kilometros", "Consumo", "Año del modelo", "Potencia",
            "Traccion", "Peso", "Capacidad tanque"
        };

        DefaultTableModel modelo = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);

        for (Vehicle vehicle : vehicleshash.values()) {
            Object[] fila = new Object[20];
            fila[0] = vehicle.getId();
            fila[1] = vehicle.getType();
            fila[2] = vehicle.getBrand();
            fila[3] = vehicle.getModel();
            fila[4] = vehicle.getStatus();
            fila[5] = vehicle.getCategory();
            fila[6] = vehicle.getLicense_plate();
            fila[7] = vehicle.getPrice();
            fila[8] = vehicle.getPhotos();

            fila[9] = vehicle.getSpecs().getFuel_type();
            fila[10] = vehicle.getSpecs().getTransmission_type();
            fila[11] = vehicle.getSpecs().getKilometres();
            fila[12] = vehicle.getSpecs().getConsumption();
            fila[13] = vehicle.getSpecs().getModel_year();
            fila[14] = vehicle.getSpecs().getEngine_cc();
            fila[15] = vehicle.getSpecs().getTraction();
            fila[16] = vehicle.getSpecs().getWeight();
            fila[17] = vehicle.getSpecs().getFuel_tank();
            modelo.addRow(fila);
        }

        tb_vehicles.setModel(modelo);
        resizeColumnWidth(tb_vehicles);
        tb_vehicles.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int i = 0; i < tb_vehicles.getColumnCount(); i++) {
            tb_vehicles.getColumnModel().getColumn(i).setCellRenderer(tcr);
        }

        tb_vehicles.getColumnModel().getColumn(0).setMaxWidth(0);
        tb_vehicles.getColumnModel().getColumn(0).setMinWidth(0);
        tb_vehicles.getColumnModel().getColumn(0).setPreferredWidth(0);
        tb_vehicles.getColumnModel().getColumn(0).setResizable(false);
    }

    private void resizeColumnWidth(JTable table) {
        TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 150;
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private void cambiarCategoria() {
        ArrayList<String> categorias = new ArrayList<>();
        categorias.add("");
        switch (cb_tipo.getSelectedIndex()) {
            case 1:
                categorias.add("Suv");
                categorias.add("Sedan");
                categorias.add("Clasico");
                categorias.add("Deportivo");
                categorias.add("Superdeportivo");
                break;
            case 2:
                categorias.add("Naked");
                categorias.add("Montaña");
                categorias.add("Circuito");
                categorias.add("Deportiva");
                break;
        }

        cb_categoria.removeAllItems();
        for (String categoria : categorias) {
            cb_categoria.addItem(categoria);
        }
    }

    private void updateTable() {
        vehicles = vehicledao.readAll();
        iniciarTabla(vehicles);
    }

    private String getSelectedValueAt(int selectedRow, int columnIndex, JTable table) {
        try{
            Object value = table.getValueAt(selectedRow, columnIndex);
            return (value != null) ? value.toString() : "";
        }catch (Exception e){
            return "0"; 
        }
    }

    private int getIdVehicleSelected() {
        try {
            return Integer.parseInt(getSelectedValueAt(tb_vehicles.getSelectedRow(), 0, tb_vehicles));
        } catch (NumberFormatException e) {
            return 0;
        } catch (Exception e) {
            return 0;
        }
    }

    private void updateRow() {
        try {
            if(controlCampos()){
                int id = getIdVehicleSelected();
                Specifications specs = createSpecsFormat(id);
                Vehicle vehicle = createVehicleFormat(id);
                vehicle.setSpecs(specs);

                if (vehicledao.update(vehicle)) {                             
                    utils.showMessage("Vehiculo actualizado correctamente");
                } else {
                    utils.showMessage("Error al actualizar vehiculo");
                }
                updateTable();
                dataClear();
            } else {
                utils.showMessage("Rellene todos los campos correctamente");
            }
        } catch (Exception e) {
            utils.showMessage("Ha ocurrido un error con el formato de alguno de los campos.\nPor favor, revise bien el formato de cada campo");
        }
    }

    private void deleteRow() {
        int selectedRow = tb_vehicles.getSelectedRow();
        if(selectedRow == -1){
                utils.showMessage("Selecciona un vehiculo para eliminar");
        } else{
            if (vehicledao.delete(Integer.parseInt(getSelectedValueAt(selectedRow, 0, tb_vehicles)))) {
                utils.showMessage("Vehiculo eliminado correctamente");
            } else {
                utils.showMessage("Error al eliminar vehiculo");
            }
            updateTable();        
        }
    }

    private void insertRow() {
        try {
            if(controlCampos()){
                Specifications specs = createSpecsFormat(0);
                Vehicle vehicle = createVehicleFormat(0);
                vehicle.setSpecs(specs);
                if (vehicledao.create(vehicle)) {           
                    utils.showMessage("Vehiculo insertado correctamente");
                } else {
                    utils.showMessage("Error al insertar vehiculo");
                }
                updateTable();
                dataClear();
            } else {
                utils.showMessage("Rellene todos los campos correctamente");
            }       
        } catch (Exception e) {
            utils.showMessage("Ha ocurrido un error con el formato de alguno de los campos.\nPor favor, revise bien el formato de cada campo");
        }
    }
    
    private boolean controlCampos() {
        if (txt_marca.getText().equals("")) {
            return false;
        } else if (txt_modelo.getText().equals("")) {
            return false;
        } else if (txt_precio.getText().equals("")) {
            return false;
        } else if (txt_consumo.getText().equals("")) {
            return false;
        } else if (txt_km.getText().equals("")) {
            return false;
        } else if (txt_matricula.getText().equals("")) {
            return false;
        } else if (txt_consumo.getText().equals("")) {
            return false;
        } else if (txt_potencia.getText().equals("")) {
            return false;
        } else if (txt_peso.getText().equals("")) {
            return false;
        } else if (txt_capacidadfuel.getText().equals("")) {
            return false;
        } else if (txt_year.getValue() < 1900 || txt_year.getValue() > 2025) {
            return false;
        } else if (cb_tipo.getSelectedIndex() == 0){
            return false;
        } else if (cb_categoria.getSelectedIndex() == 0){
            return false;
        } else if (cb_combustible.getSelectedIndex() == 0){
            return false;
        } else if (cb_transmision.getSelectedIndex() == 0){
            return false;
        } else if (cb_traccion.getSelectedIndex() == 0){
            return false;
        }
        return true;
    }

    private Specifications createSpecsFormat(int id) {
        Specifications specs = new Specifications();
        specs.setId(id);
        specs.setConsumption(Integer.parseInt(String.valueOf(txt_consumo.getText())));
        specs.setEngine_cc(Integer.parseInt(String.valueOf(txt_potencia.getText())));
        specs.setFuel_tank(Integer.parseInt(String.valueOf(txt_capacidadfuel.getText())));
        specs.setFuel_type(String.valueOf(cb_combustible.getSelectedItem()));
        specs.setKilometres(Integer.parseInt(String.valueOf(txt_km.getText())));
        specs.setModel_year(Integer.parseInt(String.valueOf(txt_year.getValue())));
        specs.setTraction(String.valueOf(cb_traccion.getSelectedItem()));
        specs.setTransmission_type(String.valueOf(cb_transmision.getSelectedItem()));
        specs.setWeight(Integer.parseInt(String.valueOf(txt_peso.getText())));
        return specs;
    }

    private Vehicle createVehicleFormat(int id) {
        Vehicle vehicle = new Vehicle();
        vehicle.setId(id);
        vehicle.setBrand(txt_marca.getText());
        vehicle.setModel(txt_modelo.getText());
        vehicle.setCategory(String.valueOf(cb_categoria.getSelectedItem()));
        vehicle.setLicense_plate(txt_matricula.getText());
        vehicle.setStatus("Disponible");
        vehicle.setType(String.valueOf(cb_tipo.getSelectedItem()));
        vehicle.setPrice(Double.valueOf(String.valueOf(txt_precio.getText())));
        vehicle.setPhotos(getSelectedValueAt(tb_vehicles.getSelectedRow(), 8, tb_vehicles));
        return vehicle;
    }

    private void rellenartxts() {
        int selectedRow = tb_vehicles.getSelectedRow();
        cb_tipo.setSelectedItem(getSelectedValueAt(selectedRow, 1, tb_vehicles));
        txt_marca.setText(getSelectedValueAt(selectedRow, 2, tb_vehicles));
        txt_modelo.setText(getSelectedValueAt(selectedRow, 3, tb_vehicles));
        txt_km.setText(getSelectedValueAt(selectedRow, 11, tb_vehicles));
        txt_matricula.setText(getSelectedValueAt(selectedRow, 6, tb_vehicles));
        txt_precio.setText(getSelectedValueAt(selectedRow, 7, tb_vehicles));
        cb_categoria.setSelectedItem(getSelectedValueAt(selectedRow, 5, tb_vehicles));
        cb_transmision.setSelectedItem(getSelectedValueAt(selectedRow, 10, tb_vehicles));
        cb_combustible.setSelectedItem(getSelectedValueAt(selectedRow, 9, tb_vehicles));
        txt_consumo.setText(getSelectedValueAt(selectedRow, 12, tb_vehicles));
        txt_potencia.setText(getSelectedValueAt(selectedRow, 14, tb_vehicles));
        txt_peso.setText(getSelectedValueAt(selectedRow, 16, tb_vehicles));
        txt_capacidadfuel.setText(getSelectedValueAt(selectedRow, 17, tb_vehicles));
        cb_traccion.setSelectedItem(getSelectedValueAt(selectedRow, 15, tb_vehicles));
        txt_year.setValue(Integer.parseInt(getSelectedValueAt(selectedRow, 13, tb_vehicles)));
    }

    private boolean importarExcel(JTable t) {
        isImport = false;
        indiceFila = -1;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar archivo Excel");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos Excel", "xls", "xlsx"));
        int seleccion = fileChooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            try (FileInputStream archivoExcel = new FileInputStream(archivo)) {
                Workbook workbook = WorkbookFactory.create(archivoExcel);
                org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = sheet.rowIterator();
                DefaultTableModel model = new DefaultTableModel();
                t.setModel(model);
                while (rowIterator.hasNext()) {
                    indiceFila++;
                    Row fila = (Row) rowIterator.next();
                    Iterator columnaIterator = fila.cellIterator();
                    Object[] listaColumna = new Object[1000];
                    int indiceColumna = -1;
                    while (columnaIterator.hasNext()) {
                        indiceColumna++;
                        Cell celda = (Cell) columnaIterator.next();
                        if (indiceFila == 0) {
                            model.addColumn(celda.getStringCellValue());
                        } else {
                            if (celda != null) {
                                if (celda.getCellType() == CellType.NUMERIC) {
                                    listaColumna[indiceColumna] = (int) Math.round(celda.getNumericCellValue());
                                }
                                if (celda.getCellType() == CellType.BOOLEAN) {
                                    listaColumna[indiceColumna] = celda.getBooleanCellValue();
                                }
                                if (celda.getCellType() == CellType.STRING) {
                                    listaColumna[indiceColumna] = celda.getStringCellValue();
                                }
                            }
                        }
                    }
                    if (indiceFila > 0) {
                        model.addRow(listaColumna);
                    }
                }
                isImport = true;
                resizeColumnWidth(t);
                t.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                rowsFormat(t, model);
            } catch (Exception ex) {
                utils.showMessage("Ha ocurrido un error al importar el archivo. \nIntentelo de nuevo");
            }
        } else {
            isImport = false;
        }
        return isImport;
    }

    private void rowsFormat(JTable t, DefaultTableModel model) {
        for (int i = 0; i < t.getRowCount(); i++) {
            for (int j = 0; j < t.getColumnCount(); j++) {
                if (String.valueOf(t.getValueAt(i, j)).equals("")) {
                    model.removeRow(i);
                    i--;
                } else if (t.getValueAt(i, j) == null) {
                    model.removeRow(i);
                    i--;
                }
            }
        }
    }

    private void insertExcel() {
        int count = 0;
        try {
            for (int i = 0; i < tb_vehiclesExcel.getRowCount(); i++) {
                Vehicle v = new Vehicle();
                Specifications s = new Specifications();
                v.setType(getSelectedValueAt(i, 0, tb_vehiclesExcel));
                v.setBrand(getSelectedValueAt(i, 1, tb_vehiclesExcel));
                v.setModel(getSelectedValueAt(i, 2, tb_vehiclesExcel));
                v.setStatus(getSelectedValueAt(i, 3, tb_vehiclesExcel));
                v.setCategory(getSelectedValueAt(i, 4, tb_vehiclesExcel));
                v.setLicense_plate(getSelectedValueAt(i, 5, tb_vehiclesExcel));
                v.setPrice(Double.valueOf(getSelectedValueAt(i, 6, tb_vehiclesExcel)));
                v.setPhotos(getSelectedValueAt(i, 7, tb_vehiclesExcel));
                s.setFuel_type(getSelectedValueAt(i, 8, tb_vehiclesExcel));
                s.setTransmission_type(getSelectedValueAt(i, 9, tb_vehiclesExcel));
                s.setKilometres(Integer.parseInt(getSelectedValueAt(i, 10, tb_vehiclesExcel)));
                s.setConsumption(Integer.parseInt(getSelectedValueAt(i, 11, tb_vehiclesExcel)));
                s.setModel_year(Integer.parseInt(getSelectedValueAt(i, 12, tb_vehiclesExcel)));
                s.setEngine_cc(Integer.parseInt(getSelectedValueAt(i, 13, tb_vehiclesExcel)));
                s.setTraction(getSelectedValueAt(i, 14, tb_vehiclesExcel));
                s.setWeight(Integer.parseInt(getSelectedValueAt(i, 15, tb_vehiclesExcel)));
                s.setFuel_tank(Integer.parseInt(getSelectedValueAt(i, 16, tb_vehiclesExcel)));
                v.setSpecs(s);
                vehicledao.create(v);
                count++;
            }
            updateTable();
            btn_insertExcel.setEnabled(false);
            
        } catch (NumberFormatException e) {
            utils.showMessage("Ha habido un error al insertar los vehiculos.\nProbablemente haya sido algun error de formato en algun campo.\nRevise los campos en el Excel");
            btn_insertExcel.setEnabled(false);
            updateTable();
            return;
        }
        utils.showMessage("Se han insertado " + count + " vehiculos");
    }

    private void dataClear() {
        JTextField[] textFieldsToClear = {
            txt_marca, txt_modelo, txt_matricula, txt_precio, txt_consumo,
            txt_potencia, txt_peso, txt_capacidadfuel, txt_km
        };
        JComboBox[] comboBoxesToClear = {
            cb_tipo, cb_categoria, cb_combustible, cb_transmision, cb_traccion
        };
        JYearChooser[] yearChoosersToClear = {
            txt_year
        };

        for (JTextField textField : textFieldsToClear) {
            textField.setText("");
        }
        for (JComboBox comboBox : comboBoxesToClear) {
            comboBox.setSelectedIndex(0);
        }
        for (JYearChooser yearchooser : yearChoosersToClear) {
            yearchooser.setValue(1950);
        }
    }

    private void buscarporfiltro() {
        try {
            sWhere = "";
            if (txt_marca.getText() != null && !txt_marca.getText().contentEquals("")) {
                sWhere = sWhere + " VCL.brand LIKE '%" + txt_marca.getText() + "%'";
            }
            if (txt_modelo.getText() != null && !txt_modelo.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " VCL.model LIKE '%" + txt_modelo.getText() + "%'";
            }
            if (txt_precio.getText() != null && !txt_precio.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " VCL.price <=" + txt_precio.getText();
            }
            if (txt_km.getText() != null && !txt_km.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.kilometres <=" + txt_km.getText();
            }
            if (txt_consumo.getText() != null && !txt_consumo.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.consumption <=" + txt_consumo.getText();
            }
            if (txt_matricula.getText() != null && !txt_matricula.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " VCL.license_plate LIKE '%" + txt_matricula.getText() + "%'";
            }
            if (txt_peso.getText() != null && !txt_peso.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.weight <=" + txt_peso.getText();
            }
            if (txt_capacidadfuel.getText() != null && !txt_capacidadfuel.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.fuel_tank >=" + txt_capacidadfuel.getText();
            }
            if (cb_categoria.getSelectedItem() != null) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " VCL.category LIKE '%" + cb_categoria.getSelectedItem().toString() + "%'";
            }
            if (cb_combustible.getSelectedItem() != null) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.fuel_type LIKE '%" + cb_combustible.getSelectedItem().toString() + "%'";
            }
            if (cb_transmision.getSelectedItem() != null) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.transmission_type LIKE '%" + cb_transmision.getSelectedItem().toString() + "%'";
            }
            if (cb_traccion.getSelectedItem() != null) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.traction LIKE '%" + cb_traccion.getSelectedItem().toString() + "%'";
            }
            if (cb_tipo.getSelectedItem() != null) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " VCL.type LIKE '%" + cb_tipo.getSelectedItem().toString() + "%'";
            }
            if (txt_potencia.getText() != null && !txt_potencia.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.engine_cc >= " + txt_potencia.getText();
            }
            if (txt_year.getValue() > 1900) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " SPC.model_year >= " + txt_year.getValue();
            }
            
            if (!sWhere.contentEquals("")) {
                sWhere = " WHERE" + sWhere + " AND VCL.status = 'Disponible'";
            }

            vehicles = vehicledao.readFilter(URLEncoder.encode(sWhere, "UTF-8"));
            iniciarTabla(vehicles);
        } catch (UnsupportedEncodingException ex) {
        }
    }

    private void mostrarFormato() {
        ImageIcon imgIcon = new ImageIcon(getClass().getResource("/img/imgVehicleFormat.jpeg"));
        if (JOptionPane.showConfirmDialog(this, "", "¿Deseas descargarlo en Excel?", JOptionPane.YES_OPTION, JOptionPane.INFORMATION_MESSAGE, imgIcon) == 0) {
            descargarExcel();
        }
    }

    private void descargarExcel() {
        try {
            String fileName = "insertVehiculosFormat.xlsx";
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Seleccionar ruta de descarga");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File selectedDir = fileChooser.getSelectedFile();
                File outputFile = new File(selectedDir, fileName);
                
                awsImages.downloadExcel(fileName, outputFile.toString());
                Desktop.getDesktop().open(outputFile);
            }
        } catch (IOException ex) {
            utils.showMessage("Error al descargar el archivo excel");
        }
    }

    private boolean exportarExcel(JTable t) {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de excel", "xls");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Seleccione una ruta");
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String ruta = chooser.getSelectedFile().toString().concat(".xls");
            try {
                File archivoXLS = new File(ruta);
                if (archivoXLS.exists()) {
                    archivoXLS.delete();
                }
                archivoXLS.createNewFile();
                Workbook libro = new HSSFWorkbook();
                try (FileOutputStream archivo = new FileOutputStream(archivoXLS)) {
                    Sheet hoja = libro.createSheet("Vehiculos_MultiMotors");
                    hoja.setDisplayGridlines(false);
                    for (int f = 0; f < t.getRowCount(); f++) {
                        Row fila = hoja.createRow(f);
                        for (int c = 0; c < t.getColumnCount(); c++) {
                            Cell celda = fila.createCell(c);
                            if (f == 0) {
                                celda.setCellValue(t.getColumnName(c));
                            }
                        }
                    }
                    int filaInicio = 1;
                    for (int f = 0; f < t.getRowCount(); f++) {
                        Row fila = hoja.createRow(filaInicio);
                        filaInicio++;
                        for (int c = 0; c < t.getColumnCount(); c++) {
                            Cell celda = fila.createCell(c);
                            String dato = String.valueOf(t.getValueAt(f, c));
                            dato = dato.replaceAll("null", "");
                            if (t.getValueAt(f, c) instanceof Double) {
                                celda.setCellValue(Double.parseDouble(dato));
                            } else if (t.getValueAt(f, c) instanceof Float) {
                                celda.setCellValue(Float.parseFloat(dato));
                            } else {
                                celda.setCellValue(dato);
                            }
                        }
                    }
                    libro.write(archivo);
                }
                Desktop.getDesktop().open(archivoXLS);
                return true;
            } catch (IOException | NumberFormatException e) {
                utils.showMessage("Ha ocurrido un error. \nIntentelo de nuevo");
            }
        }
        return false;
    }

    private void insertImage() {
        int id = getIdVehicleSelected();
        if(id <= 0){
            utils.showMessage("Selecciona un vehiculo para insertar imagenes");
        } else {
            Specifications specs = createSpecsFormat(id);
            Vehicle vehicle = createVehicleFormat(id);
            vehicle.setSpecs(specs);
            vehicle.setPhotos(selectImages(vehicle));
            if(vehicledao.update(vehicle)){
                utils.showMessage("Se han insertado las imagenes correctamente");
            } else {
                utils.showMessage("Error al insertar imagenes");
            }
            updateTable();
        }
    }

    private void sacarPermisos() {
        String permisos = user.getPermissions();
        array = permisos.split("-");
    }

    private String selectImages(Vehicle vehicle) {
        String photos = "";
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        int result = fileChooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = fileChooser.getSelectedFiles();
            String imageName = "img" + vehicle.getBrand() + vehicle.getModel() + vehicle.getLicense_plate().replace(" ", "");
            int index = 1;

            for (File selectedFile : selectedFiles) {
                photos += imageName + (index) + ".jpg-";
                awsImages.uploadImage(selectedFile.toString(), imageName + (index) + ".jpg");
                index++;
            }
        }
        return photos;
    }

    private void updateVehicle() {
        if (utils.accesoPermitido("Editar vehiculo", array)) {
            updateRow();
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void insertVehicle() {
        if (utils.accesoPermitido("Agregar vehiculo", array)) {
            insertRow();
        } else {
            utils.showMessagePerimissionError();
        }
    }
    
    private void insertVehiclesExcel() {
        if (utils.accesoPermitido("Agregar vehiculo", array)) {
            insertExcel();
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void deleteVehicle() {
        if (utils.accesoPermitido("Eliminar vehiculo", array)) {
            deleteRow();
            dataClear();
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void importExcel() {
        panel_excel.setVisible(true);
        if (importarExcel(tb_vehiclesExcel)) {
            utils.showMessage("Se ha importado correctamente");
            panel_excel.setVisible(true);
            panel_vehicles.setVisible(false);
            btn_insertExcel.setEnabled(true);
        } else {
            panel_excel.setVisible(false);
        }
    }

    private void exportExcel() {
        if (utils.accesoPermitido("Generar Excel", array)) {
            if (exportarExcel(tb_vehicles)) {
                utils.showMessage("Se ha exportado correctamente");
            }
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void updateImage() {
        if (utils.accesoPermitido("Editar vehiculo", array)) {
            insertImage();
            dataClear();
        } else {
            utils.showMessagePerimissionError();
        }
    }
}