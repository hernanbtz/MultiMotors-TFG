package com.multimotors.forms;

import com.multimotors.models.Address;
import com.multimotors.models.User;
import com.multimotors.controllers.AddressController;
import com.multimotors.controllers.PermissionsController;
import com.multimotors.controllers.UsersController;
import com.multimotors.utils.AWSFiles;
import com.multimotors.utils.Utils;
import com.toedter.calendar.JDateChooser;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;

/**
 * @author Sergio
 * @author Fabian 
 */
public class UsersAdminScreen extends javax.swing.JDialog {

    public UsersAdminScreen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    public UsersAdminScreen(java.awt.Frame parent, boolean modal, int id_user) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        init(id_user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_excel = new javax.swing.JPanel();
        scroll_excel = new javax.swing.JScrollPane();
        tb_usuariosExcel = new javax.swing.JTable();
        panel_usuarios = new javax.swing.JPanel();
        scroll_tb = new javax.swing.JScrollPane();
        tb_usuarios = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        txt_phone = new javax.swing.JTextField();
        txt_name = new javax.swing.JTextField();
        txt_DNI = new javax.swing.JTextField();
        txt_surname = new javax.swing.JTextField();
        txt_mail = new javax.swing.JTextField();
        txt_city = new javax.swing.JTextField();
        txt_date = new com.toedter.calendar.JDateChooser();
        txt_floor = new javax.swing.JTextField();
        txt_streetnumber = new javax.swing.JTextField();
        txt_streetname = new javax.swing.JTextField();
        txt_poblation = new javax.swing.JTextField();
        txt_zipcode = new javax.swing.JTextField();
        txt_block = new javax.swing.JTextField();
        txt_gender = new javax.swing.JComboBox<>();
        txt_nationality = new javax.swing.JComboBox<>();
        txt_door = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        bt_insert = new javax.swing.JLabel();
        bt_delete = new javax.swing.JLabel();
        bt_update = new javax.swing.JLabel();
        bt_clear = new javax.swing.JButton();
        bt_filtrar = new javax.swing.JButton();
        txt_country = new javax.swing.JComboBox<>();
        bt_gestPerms = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bt_importar = new javax.swing.JButton();
        bt_exportar = new javax.swing.JButton();
        btn_insertExcel = new javax.swing.JButton();
        bt_format = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel_excel.setBackground(new java.awt.Color(204, 204, 204));
        panel_excel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        panel_excel.setLayout(new javax.swing.BoxLayout(panel_excel, javax.swing.BoxLayout.LINE_AXIS));

        tb_usuariosExcel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_usuariosExcel.setRowHeight(50);
        tb_usuariosExcel.setRowMargin(5);
        scroll_excel.setViewportView(tb_usuariosExcel);

        panel_excel.add(scroll_excel);

        getContentPane().add(panel_excel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 890, 620));

        panel_usuarios.setBackground(new java.awt.Color(204, 204, 204));
        panel_usuarios.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        panel_usuarios.setLayout(new javax.swing.BoxLayout(panel_usuarios, javax.swing.BoxLayout.LINE_AXIS));

        tb_usuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_usuarios.setRowHeight(50);
        tb_usuarios.setRowMargin(5);
        tb_usuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_usuariosMouseClicked(evt);
            }
        });
        scroll_tb.setViewportView(tb_usuarios);

        panel_usuarios.add(scroll_tb);

        getContentPane().add(panel_usuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 890, 620));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel2.add(txt_phone, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, 150, -1));
        jPanel2.add(txt_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 150, -1));
        jPanel2.add(txt_DNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 160, -1));
        jPanel2.add(txt_surname, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 160, -1));
        jPanel2.add(txt_mail, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 330, -1));
        jPanel2.add(txt_city, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 290, 150, -1));
        jPanel2.add(txt_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 330, 30));
        jPanel2.add(txt_floor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 160, -1));
        jPanel2.add(txt_streetnumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 160, -1));
        jPanel2.add(txt_streetname, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 330, -1));
        jPanel2.add(txt_poblation, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 160, -1));
        jPanel2.add(txt_zipcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, 150, -1));
        jPanel2.add(txt_block, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 440, 150, -1));

        txt_gender.setForeground(new java.awt.Color(73, 80, 87));
        txt_gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Masculino", "Femenino", "Otro" }));
        jPanel2.add(txt_gender, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 160, 30));

        txt_nationality.setForeground(new java.awt.Color(73, 80, 87));
        txt_nationality.setToolTipText("");
        jPanel2.add(txt_nationality, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 190, 150, 30));
        jPanel2.add(txt_door, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 490, 150, -1));

        jLabel2.setText("Nombre");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 160, -1));

        jLabel3.setText("DNI");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 160, -1));

        jLabel4.setText("Telefono");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 160, -1));

        jLabel5.setText("Apellido");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 160, -1));

        jLabel7.setText("Email");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 160, -1));

        jLabel8.setText("Nacionalidad");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 160, -1));

        jLabel9.setText("Genero");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 160, -1));

        jLabel11.setText("Fecha de nacimiento");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 160, -1));

        jLabel12.setText("Ciudad");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 160, -1));

        jLabel13.setText("Pais");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 160, -1));

        jLabel14.setText("Codigo postal");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, 160, -1));

        jLabel15.setText("Poblacion");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 160, -1));

        jLabel17.setText("Nombre de la calle");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 330, -1));

        jLabel18.setText("Bloque");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 420, 160, -1));

        jLabel19.setText("Numero");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 160, -1));

        jLabel20.setText("Puerta");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 470, 160, -1));

        jLabel21.setText("Planta");
        jPanel2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 160, -1));

        bt_insert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/insert.png"))); // NOI18N
        bt_insert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_insertMouseClicked(evt);
            }
        });
        jPanel2.add(bt_insert, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 520, -1, 50));

        bt_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        bt_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_deleteMouseClicked(evt);
            }
        });
        jPanel2.add(bt_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 520, -1, -1));

        bt_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/update.png"))); // NOI18N
        bt_update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_updateMouseClicked(evt);
            }
        });
        jPanel2.add(bt_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 520, -1, -1));

        bt_clear.setBackground(new java.awt.Color(255, 153, 255));
        bt_clear.setText("LIMPIAR CAMPOS");
        bt_clear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_clearActionPerformed(evt);
            }
        });
        jPanel2.add(bt_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 630, 140, 40));

        bt_filtrar.setBackground(new java.awt.Color(255, 153, 255));
        bt_filtrar.setText("FILTRAR");
        bt_filtrar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_filtrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_filtrarActionPerformed(evt);
            }
        });
        jPanel2.add(bt_filtrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 580, 140, 40));

        jPanel2.add(txt_country, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 160, -1));

        bt_gestPerms.setBackground(new java.awt.Color(255, 153, 255));
        bt_gestPerms.setText("GESTIONAR PERMISOS");
        bt_gestPerms.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_gestPerms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_gestPermsActionPerformed(evt);
            }
        });
        jPanel2.add(bt_gestPerms, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 630, 170, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 350, 680));

        jPanel1.setBackground(new java.awt.Color(244, 243, 243));
        jPanel1.setForeground(new java.awt.Color(60, 63, 65));
        jPanel1.setMaximumSize(new java.awt.Dimension(1280, 720));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bt_importar.setBackground(new java.awt.Color(255, 153, 255));
        bt_importar.setText("IMPORTAR UN EXCEL");
        bt_importar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_importarActionPerformed(evt);
            }
        });
        jPanel1.add(bt_importar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 660, 180, 40));

        bt_exportar.setBackground(new java.awt.Color(255, 153, 255));
        bt_exportar.setText("EXPORTAR A EXCEL");
        bt_exportar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_exportarActionPerformed(evt);
            }
        });
        jPanel1.add(bt_exportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 660, 180, 40));

        btn_insertExcel.setBackground(new java.awt.Color(255, 153, 255));
        btn_insertExcel.setText("INSERTAR USUARIOS DE EXCEL");
        btn_insertExcel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btn_insertExcel.setEnabled(false);
        btn_insertExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertExcelActionPerformed(evt);
            }
        });
        jPanel1.add(btn_insertExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 660, 250, 40));

        bt_format.setBackground(new java.awt.Color(255, 153, 255));
        bt_format.setText("FORMATO DE EXCEL A IMPORTAR");
        bt_format.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        bt_format.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_formatActionPerformed(evt);
            }
        });
        jPanel1.add(bt_format, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 660, 250, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/myacc_wp.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1280, 720));
        jLabel1.setMinimumSize(new java.awt.Dimension(1280, 720));
        jLabel1.setPreferredSize(new java.awt.Dimension(1280, 720));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tb_usuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_usuariosMouseClicked
        rellenartxts();
    }//GEN-LAST:event_tb_usuariosMouseClicked

    private void bt_updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_updateMouseClicked
        updateUser();
    }//GEN-LAST:event_bt_updateMouseClicked

    private void bt_insertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_insertMouseClicked
        insertUser();
    }//GEN-LAST:event_bt_insertMouseClicked

    private void bt_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_deleteMouseClicked
        deleteUser();
    }//GEN-LAST:event_bt_deleteMouseClicked

    private void btn_insertExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertExcelActionPerformed
        insertUsersExcel();
    }//GEN-LAST:event_btn_insertExcelActionPerformed

    private void bt_importarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_importarActionPerformed
        importExcel();
    }//GEN-LAST:event_bt_importarActionPerformed

    private void bt_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_clearActionPerformed
        dataClear();
    }//GEN-LAST:event_bt_clearActionPerformed

    private void bt_filtrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_filtrarActionPerformed
        buscarporfiltro();
    }//GEN-LAST:event_bt_filtrarActionPerformed

    private void bt_exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_exportarActionPerformed
        exportExcel();
    }//GEN-LAST:event_bt_exportarActionPerformed

    private void bt_formatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_formatActionPerformed
        mostrarFormato();
    }//GEN-LAST:event_bt_formatActionPerformed

    private void bt_gestPermsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_gestPermsActionPerformed
        updatePermissions();
    }//GEN-LAST:event_bt_gestPermsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsersAdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UsersAdminScreen dialog = new UsersAdminScreen(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_clear;
    private javax.swing.JLabel bt_delete;
    private javax.swing.JButton bt_exportar;
    private javax.swing.JButton bt_filtrar;
    private javax.swing.JButton bt_format;
    private javax.swing.JButton bt_gestPerms;
    private javax.swing.JButton bt_importar;
    private javax.swing.JLabel bt_insert;
    private javax.swing.JLabel bt_update;
    private javax.swing.JButton btn_insertExcel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panel_excel;
    private javax.swing.JPanel panel_usuarios;
    private javax.swing.JScrollPane scroll_excel;
    private javax.swing.JScrollPane scroll_tb;
    private javax.swing.JTable tb_usuarios;
    private javax.swing.JTable tb_usuariosExcel;
    private javax.swing.JTextField txt_DNI;
    private javax.swing.JTextField txt_block;
    private javax.swing.JTextField txt_city;
    private javax.swing.JComboBox<String> txt_country;
    private com.toedter.calendar.JDateChooser txt_date;
    private javax.swing.JTextField txt_door;
    private javax.swing.JTextField txt_floor;
    private javax.swing.JComboBox<String> txt_gender;
    private javax.swing.JTextField txt_mail;
    private javax.swing.JTextField txt_name;
    private javax.swing.JComboBox<String> txt_nationality;
    private javax.swing.JTextField txt_phone;
    private javax.swing.JTextField txt_poblation;
    private javax.swing.JTextField txt_streetname;
    private javax.swing.JTextField txt_streetnumber;
    private javax.swing.JTextField txt_surname;
    private javax.swing.JTextField txt_zipcode;
    // End of variables declaration//GEN-END:variables

    private SimpleDateFormat format;
    private UsersController userdao;
    private AddressController addressdao;
    private PermissionsController permissionsdao;
    private HashMap<String, String> paisesNacionalidades;
    private HashMap<Integer, User> users;
    private String sWhere = "";
    private boolean isImport;
    private int indiceFila;
    private String[] array;
    private Utils utils;
    private User user;

    private void init(int id_user) {
        this.utils = new Utils(this);
        this.userdao = new UsersController();
        this.addressdao = new AddressController();
        this.permissionsdao = new PermissionsController();
        this.format = new SimpleDateFormat("yyyy-MM-dd");
        this.user = userdao.readUser(id_user);
        this.users = userdao.readAll();
        iniciarTabla(users);
        sacarPermisos();
        rellenarCombo();
    }

    private void iniciarTabla(HashMap<Integer, User> usershash) {
        panel_excel.setVisible(false);
        panel_usuarios.setVisible(true);
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        String[] columnNames = {
            "ID", "DNI", "Nombre", "Apellido", "Teléfono", "Email", "Genero", "Nacionalidad",
            "Fecha de nacimiento", "Pais", "Ciudad", "Poblacion", "Codigo postal", "Nombre de la calle",
            "Numero", "Bloque", "Planta", "Puerta", "Permisos"
        };
        for (String columnName : columnNames) {
            modelo.addColumn(columnName);
        }
        for (User row_user : usershash.values()) {
            Object[] fila = new Object[20];
            fila[0] = row_user.getId();
            fila[1] = row_user.getDni();
            fila[2] = row_user.getName();
            fila[3] = row_user.getSurname();
            fila[4] = row_user.getPhone();
            fila[5] = row_user.getEmail();
            fila[6] = row_user.getGender();
            fila[7] = row_user.getNationality();
            String formattedDate = format.format(row_user.getBirthdate());
            fila[8] = formattedDate;
            if (row_user.getAddress() != null) {
                fila[9] = row_user.getAddress().getCountry();
                fila[10] = row_user.getAddress().getCity();
                fila[11] = row_user.getAddress().getPoblation();
                fila[12] = row_user.getAddress().getPostal_code();
                fila[13] = row_user.getAddress().getStreet_name();
                fila[14] = row_user.getAddress().getStreet_num();
                fila[15] = row_user.getAddress().getPortal();
                fila[16] = row_user.getAddress().getFloor();
                fila[17] = row_user.getAddress().getDoor();
            } else {
                fila[9] = "";
                fila[10] = "";
                fila[11] = "";
                fila[12] = "";
                fila[13] = "";
                fila[14] = "";
                fila[15] = "";
                fila[16] = "";
                fila[17] = "";
            }
            fila[18] = row_user.getPermissions();
            modelo.addRow(fila);
        }
        tb_usuarios.setModel(modelo);
        resizeColumnWidth(tb_usuarios);
        tb_usuarios.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (int i = 0; i < tb_usuarios.getColumnCount(); i++) {
            tb_usuarios.getColumnModel().getColumn(i).setCellRenderer(tcr);
        }
        TableColumn idColumn = tb_usuarios.getColumnModel().getColumn(0);
        idColumn.setMaxWidth(0);
        idColumn.setMinWidth(0);
        idColumn.setPreferredWidth(0);
        idColumn.setResizable(false);
    }

    private void resizeColumnWidth(JTable table) {
        TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 150;
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private void updateRow() {
        try {
            if(controlExceciones() && correctAddressFormat()){
                User row_user = createUserFormat();
                row_user.setId(getIdUserSelected());

                if (userdao.update(row_user)) {              
                    Address address = createAddressFormat();
                    address.setId(row_user.getId());

                    if(addressdao.create(address)){
                        utils.showMessage("Usuario actualizado correctamente");
                    } else {
                        if(addressdao.update(address)){
                            utils.showMessage("Usuario actualizado correctamente");
                        } else {
                            utils.showMessage("Error al actualizar la dirección del usuario");
                        }
                    }
                } else {
                    utils.showMessage("Error al actualizar usuario");
                }
                updateTable();
                dataClear();
            }
        } catch (Exception e) {
            utils.showMessage("Ha ocurrido un error con el formato de alguno de los campos.\nPor favor, revise bien el formato de cada campo");
        }
    }

    private void deleteRow() {
        int selectedRow = tb_usuarios.getSelectedRow();
        if(selectedRow == -1){
                utils.showMessage("Selecciona un usuario para eliminar");
        } else{
            if (userdao.delete(Integer.parseInt(getSelectedValueAt(selectedRow, 0, tb_usuarios)))) {
                utils.showMessage("Usuario eliminado correctamente");
            } else {
                utils.showMessage("Error al eliminar usuario");
            }
            updateTable();        
        }
    }

    private void insertRow() {
        try {
            if(controlExceciones() && correctAddressFormat()){
                User row_user = createUserFormat();
                row_user.setPass(utils.showInputDialog("Escribe la contraseña que le quieres establecer a este usuario."));
                if (userdao.create(row_user)) {
                    Address address = createAddressFormat();

                    if(addressdao.create(address)){
                        utils.showMessage("Usuario insertado correctamente");
                    } else {
                        utils.showMessage("Error al insertar la dirección del usuario");
                    }             
                } else {
                    utils.showMessage("Error al insertar usuario");
                }
                updateTable();
                dataClear();
            }
        } catch (Exception e) {
            utils.showMessage("Ha ocurrido un error con el formato de alguno de los campos.\nPor favor, revise bien el formato de cada campo");
        }
    }

    private void updateTable() {
        users = userdao.readAll();
        iniciarTabla(users);
    }

    private User createUserFormat() {
        User new_user = new User();
        new_user.setDni(txt_DNI.getText());
        new_user.setName(txt_name.getText());
        new_user.setSurname(txt_surname.getText());
        new_user.setPhone(txt_phone.getText());
        new_user.setEmail(txt_mail.getText());
        new_user.setPass("null");
        new_user.setGender(String.valueOf(txt_gender.getSelectedItem()));
        new_user.setNationality(String.valueOf(txt_nationality.getSelectedItem()));
        new_user.setBirthdate(txt_date.getDate());
        return new_user;
    }

    private Address createAddressFormat() {
        Address address = new Address();
        address.setCity(txt_city.getText());
        address.setDoor(txt_door.getText());
        address.setCountry(String.valueOf(txt_country.getSelectedItem()));
        address.setPoblation(txt_poblation.getText());
        address.setStreet_name(txt_streetname.getText());
        address.setPostal_code(Integer.parseInt(txt_zipcode.getText()));
        address.setStreet_num(Integer.parseInt(txt_streetnumber.getText()));
        address.setPortal(Integer.parseInt(txt_block.getText()));
        address.setFloor(Integer.parseInt(txt_floor.getText()));
        return address;
    }

    private void rellenartxts() {
        int selectedRow = tb_usuarios.getSelectedRow();
        txt_DNI.setText(getSelectedValueAt(selectedRow, 1, tb_usuarios));
        txt_name.setText(getSelectedValueAt(selectedRow, 2, tb_usuarios));
        txt_surname.setText(getSelectedValueAt(selectedRow, 3, tb_usuarios));
        txt_phone.setText(getSelectedValueAt(selectedRow, 4, tb_usuarios));
        txt_mail.setText(getSelectedValueAt(selectedRow, 5, tb_usuarios));
        txt_gender.setSelectedItem(getSelectedValueAt(selectedRow, 6, tb_usuarios));
        txt_nationality.setSelectedItem(getSelectedValueAt(selectedRow, 7, tb_usuarios));
        try {
            txt_date.setDate(format.parse(getSelectedValueAt(selectedRow, 8, tb_usuarios)));
        } catch (ParseException e) {
            txt_date.setDate(null);
        }
        txt_country.setSelectedItem(getSelectedValueAt(selectedRow, 9, tb_usuarios));
        txt_city.setText(getSelectedValueAt(selectedRow, 10, tb_usuarios));
        txt_poblation.setText(getSelectedValueAt(selectedRow, 11, tb_usuarios));
        txt_zipcode.setText(getSelectedValueAt(selectedRow, 12, tb_usuarios));
        txt_streetname.setText(getSelectedValueAt(selectedRow, 13, tb_usuarios));
        txt_streetnumber.setText(getSelectedValueAt(selectedRow, 14, tb_usuarios));
        txt_block.setText(getSelectedValueAt(selectedRow, 15, tb_usuarios));
        txt_floor.setText(getSelectedValueAt(selectedRow, 16, tb_usuarios));
        txt_door.setText(getSelectedValueAt(selectedRow, 17, tb_usuarios));
    }

    private String getSelectedValueAt(int selectedRow, int columnIndex, JTable table) {
        try{
            Object value = table.getValueAt(selectedRow, columnIndex);
            return (value != null) ? value.toString() : "";
        } catch (Exception e){
            return "0";
        }
    }

    private void rellenarCombo() {
        paisesNacionalidades = utils.getPaisesNacionalidades();
        paisesNacionalidades.put("", "");

        ArrayList<String> comboNacionalidad = new ArrayList<>(paisesNacionalidades.values());
        Collections.sort(comboNacionalidad);
        txt_nationality.setModel(new DefaultComboBoxModel<>(comboNacionalidad.toArray(new String[0])));

        ArrayList<String> comboPaises = new ArrayList<>(paisesNacionalidades.keySet());
        Collections.sort(comboPaises);
        txt_country.setModel(new DefaultComboBoxModel<>(comboPaises.toArray(new String[0])));
    }

    private boolean importarExcel(JTable t) {
        isImport = false;
        indiceFila = -1;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar archivo Excel");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos Excel", "xls", "xlsx"));
        int seleccion = fileChooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            try (FileInputStream archivoExcel = new FileInputStream(archivo)) {
                Workbook workbook = WorkbookFactory.create(archivoExcel);
                org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = sheet.rowIterator();
                DefaultTableModel model = new DefaultTableModel();
                t.setModel(model);
                while (rowIterator.hasNext()) {
                    indiceFila++;
                    Row fila = (Row) rowIterator.next();
                    Iterator columnaIterator = fila.cellIterator();
                    Object[] listaColumna = new Object[1000];
                    int indiceColumna = -1;
                    while (columnaIterator.hasNext()) {
                        indiceColumna++;
                        Cell celda = (Cell) columnaIterator.next();
                        if (indiceFila == 0) {
                            model.addColumn(celda.getStringCellValue());
                        } else {
                            if (celda != null) {
                                if (celda.getCellType() == CellType.NUMERIC) {
                                    listaColumna[indiceColumna] = (int) Math.round(celda.getNumericCellValue());
                                }
                                if (celda.getCellType() == CellType.BOOLEAN) {
                                    listaColumna[indiceColumna] = celda.getBooleanCellValue();
                                }
                                if (celda.getCellType() == CellType.STRING) {
                                    listaColumna[indiceColumna] = celda.getStringCellValue();
                                }
                            }
                        }
                    }
                    if (indiceFila > 0) {
                        model.addRow(listaColumna);
                    }
                }
                isImport = true;
                resizeColumnWidth(t);
                t.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                rowsFormat(t, model);
            } catch (Exception ex) {
                utils.showMessage("Ha ocurrido un error al importar el archivo. \nIntentelo de nuevo");
            }
        } else {
            isImport = false;
        }
        return isImport;
    }

    private void rowsFormat(JTable t, DefaultTableModel model) {
        for (int i = 0; i < t.getRowCount(); i++) {
            for (int j = 0; j < t.getColumnCount(); j++) {
                if (String.valueOf(t.getValueAt(i, j)).equals("")) {
                    model.removeRow(i);
                    i--;
                } else if (t.getValueAt(i, j) == null) {
                    model.removeRow(i);
                    i--;
                }
            }
        }
    }

    private void insertExcel() {
        int count = 0;
        try {
            for (int i = 0; i < tb_usuariosExcel.getRowCount(); i++) {
                User row_user = new User();
                row_user.setDni(getSelectedValueAt(i, 0, tb_usuariosExcel));
                row_user.setName(getSelectedValueAt(i, 1, tb_usuariosExcel));
                row_user.setSurname(getSelectedValueAt(i, 2, tb_usuariosExcel));
                row_user.setPhone(getSelectedValueAt(i, 3, tb_usuariosExcel));
                row_user.setEmail(getSelectedValueAt(i, 4, tb_usuariosExcel));
                row_user.setPass(getSelectedValueAt(i, 5, tb_usuariosExcel));
                row_user.setGender(getSelectedValueAt(i, 6, tb_usuariosExcel));
                row_user.setNationality(getSelectedValueAt(i, 7, tb_usuariosExcel));
                row_user.setBirthdate(format.parse(getSelectedValueAt(i, 8, tb_usuariosExcel)));
                row_user.setPermissions(getSelectedValueAt(i, 18, tb_usuariosExcel));
                userdao.create(row_user);
                Address address = new Address();
                address.setCity(getSelectedValueAt(i, 10, tb_usuariosExcel));
                address.setDoor(getSelectedValueAt(i, 17, tb_usuariosExcel));
                address.setCountry(getSelectedValueAt(i, 9, tb_usuariosExcel));
                address.setPoblation(getSelectedValueAt(i, 11, tb_usuariosExcel));
                address.setStreet_name(getSelectedValueAt(i, 13, tb_usuariosExcel));
                address.setPostal_code(Integer.parseInt(getSelectedValueAt(i, 12, tb_usuariosExcel)));
                address.setStreet_num(Integer.parseInt(getSelectedValueAt(i, 14, tb_usuariosExcel)));
                address.setPortal(Integer.parseInt(getSelectedValueAt(i, 15, tb_usuariosExcel)));
                address.setFloor(Integer.parseInt(getSelectedValueAt(i, 16, tb_usuariosExcel)));
                addressdao.create(address);
                count++;
            }
            updateTable();
            btn_insertExcel.setEnabled(false);
            
        } catch (NumberFormatException | ParseException e) {
            utils.showMessage("Ha habido un error al insertar los usuarios.\nProbablemente haya sido algun error de formato en algun campo.\nRevise los campos en el Excel");
            btn_insertExcel.setEnabled(false);
            updateTable();
            return;
        }
        utils.showMessage("Se han insertado " + count + " usuarios");
    }

    private void dataClear() {
        JTextField[] textFieldsToClear = {
            txt_DNI, txt_name, txt_surname, txt_phone, txt_mail,
            txt_city, txt_poblation, txt_zipcode, txt_streetname,
            txt_streetnumber, txt_block, txt_floor, txt_door
        };
        JComboBox[] comboBoxesToClear = {
            txt_gender, txt_nationality, txt_country
        };
        JDateChooser[] dateChoosersToClear = {
            txt_date
        };
        for (JTextField textField : textFieldsToClear) {
            textField.setText("");
        }
        for (JComboBox comboBox : comboBoxesToClear) {
            comboBox.setSelectedIndex(0);
        }
        for (JDateChooser dateChooser : dateChoosersToClear) {
            dateChooser.setDate(null);
        }
    }

    private void buscarporfiltro() {
        try {
            sWhere = "";
            if (txt_DNI.getText() != null && !txt_DNI.getText().contentEquals("")) {
                sWhere = sWhere + " USU.dni LIKE '%" + txt_DNI.getText() + "%'";
            }
            if (txt_name.getText() != null && !txt_name.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " USU.name LIKE '%" + txt_name.getText() + "%'";
            }
            if (txt_surname.getText() != null && !txt_surname.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " USU.surname LIKE '%" + txt_surname.getText() + "%'";
            }
            if (txt_mail.getText() != null && !txt_mail.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " USU.email LIKE '%" + txt_mail.getText() + "%'";
            }
            if (txt_gender.getSelectedItem() != null) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " USU.gender LIKE '%" + txt_gender.getSelectedItem().toString() + "%'";
            }
            if (txt_nationality.getSelectedItem() != null) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " USU.nationality LIKE '%" + txt_nationality.getSelectedItem().toString() + "%'";
            }
            if (String.valueOf(txt_country.getSelectedItem()) != null && !String.valueOf(txt_country.getSelectedItem()).contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.country LIKE '%" + String.valueOf(txt_country.getSelectedItem()) + "%'";
            }
            if (txt_city.getText() != null && !txt_city.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.city LIKE '%" + txt_city.getText() + "%'";
            }
            if (txt_poblation.getText() != null && !txt_poblation.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.poblation LIKE '%" + txt_poblation.getText() + "%'";
            }
            if (txt_zipcode.getText() != null && !txt_zipcode.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.postal_code LIKE '%" + txt_zipcode.getText() + "%'";
            }
            if (txt_streetname.getText() != null && !txt_streetname.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.street_name LIKE '%" + txt_streetname.getText() + "%'";
            }
            if (txt_streetnumber.getText() != null && !txt_streetnumber.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.street_num LIKE '%" + txt_streetnumber.getText() + "%'";
            }
            if (txt_block.getText() != null && !txt_block.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.portal LIKE '%" + txt_block.getText() + "%'";
            }
            if (txt_floor.getText() != null && !txt_floor.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.floor LIKE '%" + txt_floor.getText() + "%'";
            }
            if (txt_door.getText() != null && !txt_door.getText().contentEquals("")) {
                if (!sWhere.contentEquals("")) {
                    sWhere = sWhere + " AND";
                }
                sWhere = sWhere + " DIR.door LIKE '%" + txt_door.getText() + "%'";
            }
            if (!sWhere.contentEquals("")) {
                sWhere = " WHERE" + sWhere + " GROUP BY 1";
            }
            users = userdao.readFilter(URLEncoder.encode(sWhere, "UTF-8"));
            iniciarTabla(users);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(UsersAdminScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void mostrarFormato() {
        ImageIcon imgIcon = new ImageIcon(getClass().getResource("/img/imgUserFormat.jpeg"));
        if (JOptionPane.showConfirmDialog(this, "", "¿Deseas descargarlo en Excel?", JOptionPane.YES_OPTION, JOptionPane.INFORMATION_MESSAGE, imgIcon) == 0) {
            descargarExcel();
        }
    }

    private void descargarExcel() {
        try {
            String fileName = "insertUsuariosFormat.xlsx";
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Seleccionar ruta de descarga");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File selectedDir = fileChooser.getSelectedFile();
                File outputFile = new File(selectedDir, fileName);
                
                new AWSFiles().downloadExcel(fileName, outputFile.toString());
                Desktop.getDesktop().open(outputFile);
            }
        } catch (IOException ex) {
            utils.showMessage("Error al descargar el archivo excel");
        }
    }

    private boolean exportarExcel(JTable t) {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de excel", "xls");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Seleccione una ruta");
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String ruta = chooser.getSelectedFile().toString().concat(".xls");
            try {
                File archivoXLS = new File(ruta);
                if (archivoXLS.exists()) {
                    archivoXLS.delete();
                }
                archivoXLS.createNewFile();
                Workbook libro = new HSSFWorkbook();
                try (FileOutputStream archivo = new FileOutputStream(archivoXLS)) {
                    Sheet hoja = libro.createSheet("Usuarios_MultiMotors");
                    hoja.setDisplayGridlines(false);
                    for (int f = 0; f < t.getRowCount(); f++) {
                        Row fila = hoja.createRow(f);
                        for (int c = 0; c < t.getColumnCount(); c++) {
                            Cell celda = fila.createCell(c);
                            if (f == 0) {
                                celda.setCellValue(t.getColumnName(c));
                            }
                        }
                    }
                    int filaInicio = 1;
                    for (int f = 0; f < t.getRowCount(); f++) {
                        Row fila = hoja.createRow(filaInicio);
                        filaInicio++;
                        for (int c = 0; c < t.getColumnCount(); c++) {
                            Cell celda = fila.createCell(c);
                            String dato = String.valueOf(t.getValueAt(f, c));
                            dato = dato.replaceAll("null", "");
                            if (t.getValueAt(f, c) instanceof Double) {
                                celda.setCellValue(Double.parseDouble(dato));
                            } else if (t.getValueAt(f, c) instanceof Float) {
                                celda.setCellValue(Float.parseFloat(dato));
                            } else {
                                celda.setCellValue(dato);
                            }
                        }
                    }
                    libro.write(archivo);
                }
                Desktop.getDesktop().open(archivoXLS);
                return true;
            } catch (IOException | NumberFormatException e) {
                utils.showMessage("Ha ocurrido un error. \nIntentelo de nuevo");
            }
        }
        return false;
    }

    private int getIdUserSelected() {
        try {
            return Integer.parseInt(String.valueOf(tb_usuarios.getValueAt(tb_usuarios.getSelectedRow(), 0)));
        } catch (NumberFormatException e) {
            return 0;
        } catch (Exception e) {
            return 0;
        }
    }

    private boolean gestionarPermisos() {
        boolean isTrue = false;
        int user_id = getIdUserSelected();
        
        if(user_id <= 0){
                utils.showMessage("Selecciona un usuario para gestionar permisos");
        } else {

            JCheckBox[] checkboxes = {
                new JCheckBox("user"),
                new JCheckBox("admin"),
                new JCheckBox("Ver vehiculos"),
                new JCheckBox("Agregar vehiculo"),
                new JCheckBox("Editar vehiculo"),
                new JCheckBox("Eliminar vehiculo"),
                new JCheckBox("Ver usuarios"),
                new JCheckBox("Agregar usuario"),
                new JCheckBox("Editar usuario"),
                new JCheckBox("Eliminar usuario"),
                new JCheckBox("Generar Excel"),
                new JCheckBox("Ver graficos")
            };

            for (String permiso : userdao.readUser(user_id).getPermissions().split("-")) {
                for (JCheckBox checkbox : checkboxes) {
                    if (permiso.equals(checkbox.getText())) {
                        checkbox.setSelected(true);
                        break;
                    }
                }
            }
            int option = JOptionPane.showConfirmDialog(null, checkboxes, "Selecciona opciones", JOptionPane.OK_CANCEL_OPTION);

            if (option == JOptionPane.OK_OPTION) {
                for (int i = 0; i < checkboxes.length; i++) {
                    permissionsdao.delete(user_id, i + 1);
                }

                for (int i = 0; i < checkboxes.length; i++) {
                    JCheckBox checkbox = checkboxes[i];
                    if (checkbox.isSelected()) {
                        permissionsdao.create(user_id, i + 1);
                    }
                }
                isTrue = true;
            }
            updateTable();
        }
        return isTrue;
    }

    private void sacarPermisos() {
        String permisos = user.getPermissions();
        array = permisos.split("-");
    }

    private void updateUser() {
        if (utils.accesoPermitido("Editar usuario", array)) {
            updateRow();
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void insertUser() {
        if (utils.accesoPermitido("Agregar usuario", array)) {
            insertRow();
        } else {
            utils.showMessagePerimissionError();
        }
    }
    
    private void insertUsersExcel() {
        if (utils.accesoPermitido("Agregar usuario", array)) {
            insertExcel();
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void deleteUser() {
        if (utils.accesoPermitido("Eliminar usuario", array)) {
            deleteRow();
            dataClear();
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void updatePermissions() {
        if (utils.accesoPermitido("Editar usuario", array)) {
            if (gestionarPermisos()) {
                utils.showMessage("Se han actualizado los permisos correctamente");
            }
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void exportExcel() {
        if (utils.accesoPermitido("Generar Excel", array)) {
            if (exportarExcel(tb_usuarios)) {
                utils.showMessage("Se ha exportado correctamente");
            }
        } else {
            utils.showMessagePerimissionError();
        }
    }

    private void importExcel() {
        panel_excel.setVisible(true);
        if (importarExcel(tb_usuariosExcel)) {
            utils.showMessage("Se ha importado correctamente");
            panel_excel.setVisible(true);
            panel_usuarios.setVisible(false);
            btn_insertExcel.setEnabled(true);
        } else {
            panel_excel.setVisible(false);
        }
    }
    
    private boolean controlExceciones() {
        boolean esCorrecto = true;
        if (!controlCampos()) {
            esCorrecto = false;
            utils.showMessage("Rellene todos los campos");
        } else if (!controlDNI()) {
            esCorrecto = false;
            utils.showMessage("Introduzca un DNI valido");
        } else if (!controlMail()) {
            esCorrecto = false;
            utils.showMessage("Introduzca un Mail valido");
        } else if (!controlTlf()) {
            esCorrecto = false;
            utils.showMessage("Introduzca un Telefono valido");
        }
        return esCorrecto;
    }

    private boolean controlDNI() {
        return Pattern.compile("[0-9]{8}[A-Z a-z]").matcher(txt_DNI.getText()).matches();
    }

    private boolean controlTlf() {
        return Pattern.compile("[0-9]{9}").matcher(txt_phone.getText()).matches();
    }

    private boolean controlMail() {
        return Pattern.compile("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$").matcher(txt_mail.getText()).matches();
    }

    private boolean controlCampos() {
        if (txt_DNI.getText().equals("")) {
            return false;
        } else if (txt_name.getText().equals("")) {
            return false;
        } else if (txt_surname.getText().equals("")) {
            return false;
        } else if (txt_phone.getText().equals("")) {
            return false;
        } else if (txt_mail.getText().equals("")) {
            return false;
        } else if (txt_date.getDate() == null) {
            return false;
        }
        return true;
    }
    
    private boolean correctAddressFormat() {
        if (txt_city.getText().equals("")) {
            utils.showMessage("Rellene el campo de Ciudad de manera correcta.");
            return false;
        }
        if (txt_poblation.getText().equals("")) {
            utils.showMessage("Rellene el campo de Población de manera correcta.");
            return false;
        }
        if (txt_zipcode.getText().equals("") && !txt_zipcode.getText().matches("\\d+")) {
            utils.showMessage("Rellene el campo de Código postal de manera correcta.");
            return false;
        }
        if (txt_streetname.getText().equals("")) {
            utils.showMessage("Rellene el campo de Nombre de la calle de manera correcta.");
            return false;
        }
        if (!txt_streetnumber.getText().matches("\\d+")) {
            utils.showMessage("Rellene el campo de Número de manera correcta.");
            return false;
        }
        if (txt_block.getText().isEmpty() || !txt_block.getText().matches("\\d+")) {
            utils.showMessage("Si tu dirección no incluye bloque, rellena el campo con un 0.");
            return false;
        }
        if (txt_floor.getText().isEmpty() || !txt_floor.getText().matches("\\d+")) {
            utils.showMessage("Si tu dirección no incluye planta, rellena el campo con un 0.");
            return false;
        }
        if (txt_door.getText().equals("")) {
            txt_door.setText(" ");
        }
        return true;
    }
}